
services:

  redis:
    image: redis/redis-stack:latest   # Redis image
    container_name: redis
    volumes:
      - redis_data:/data  # Persist Redis data

  node-webapp:
    build:
      context: ./node-webapp
    environment:
      - REPLICA_NAME=${HOSTNAME} 
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nodeapp.rule=Host(`${HOST}`)"
      - "traefik.http.routers.nodeapp.entrypoints=websecure"
      - "traefik.http.services.nodeapp.loadbalancer.server.port=3000"
    deploy:
      replicas: 3  # Set the number of replicas for the webapp
      resources:
        limits:
          memory: 500M  # Optional: Set resource limits
      restart_policy:
        condition: on-failure



  node-api:
    build:
      context: ./node-api  # Path to your backend API code
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nodeapi.entrypoints=websecure"
      - "traefik.http.routers.nodeapi.rule=Host(`${HOST}`) && PathPrefix(`/api`)"
      - "traefik.http.services.nodeapi.loadbalancer.server.port=3001"
    depends_on:
      - redis
    deploy:
      replicas: 3  # Set the number of replicas for the webapp
      resources:
        limits:
          memory: 500M  # Optional: Set resource limits
      restart_policy:
        condition: on-failure


  node-ws:
    build:
      context: ./node-ws  
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nodews.rule=Host(`${HOST}`) && PathPrefix(`/ws`)"
      - "traefik.http.routers.nodews.entrypoints=websecure"
      - "traefik.http.routers.nodews.service=nodews"
      - "traefik.http.routers.nodews.tls=false"
      - "traefik.http.services.nodews.loadbalancer.server.port=3002"
      - "traefik.http.middlewares.ws-headers.headers.customrequestheaders.Upgrade=websocket"
      - "traefik.http.middlewares.ws-headers.headers.customrequestheaders.Connection=Upgrade"
      - "traefik.http.routers.nodews.middlewares=ws-headers"
    depends_on:
      - redis  
    deploy:
      replicas: 3  # Set the number of replicas for the webapp
      restart_policy:
        condition: on-failure

    
  traefik:
    image: traefik:v2
    container_name: traefik
    restart: always
    ports:
      - 8080:8080
      - 80:80
      - 443:443
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./traefik/traefik.yml:/etc/traefik/traefik.yml:ro"
      - "./traefik/dynamic.yml:/etc/traefik/dynamic.yml:ro"
      - "./traefik/certs:/certs:ro"


volumes:
  redis_data:

